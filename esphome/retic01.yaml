# Added some data from the following codebase from Brian
# https://github.com/brianhanifin/esphome-config/blob/master/irrigation.yaml
#
#
# Also from bruxy70 code
# https://github.com/bruxy70/Irrigation-with-display
#
# Expanded to 4 zones
#
# Renamed irrigation to retic - my change back at some stage
#
# Currenty used in conjunction with package_retic.yaml for Home Assistant control
#
#
substitutions:
  project: Retic Controller 01
  id: retic01

  <<: !include common/substitutions/gpio/sonoff4chpror2.yaml


esphome:
  name: $id
  platform: ESP8266
  board: esp01_1m
  includes:
    - retic01.h

  <<: !include common/esphome/leds/status_with_api.yaml


wifi:
  ssid: !secret ssid
  password: !secret ssid_password
  domain: !secret domain
  
  # Disable rebooting due to losing connection with Home Assistant. This will allow
  # the watering schedule to continue if Home Assistant goes down. Should it become
  # unresponsive, we can have Home Assistant power cycle a smart plug to reboot it.
  reboot_timeout: 0s

  # Using these as a precaution to ensure solid WiFi connectivity.
  #power_save_mode: none

<<: !include common/ota.yaml
<<: !include common/logger_info.yaml
<<: !include common/api.yaml


globals:
  # ============================================================================= #
  # Retic time remaining
  - id: remaining_time1
    type: int
    restore_value: no
    initial_value: "300"
  - id: remaining_time2
    type: int
    restore_value: no
    initial_value: "300"
  - id: remaining_time3
    type: int
    restore_value: no
    initial_value: "300"
  - id: remaining_time4
    type: int
    restore_value: no
    initial_value: "300"

  # ============================================================================= #
  # Store previous values to verify change.
  - id: remaining_time1_previous
    type: int
    restore_value: no
    initial_value: "0"
  - id: remaining_time2_previous
    type: int
    restore_value: no
    initial_value: "0"
  - id: remaining_time3_previous
    type: int
    restore_value: no
    initial_value: "0"
  - id: remaining_time4_previous
    type: int
    restore_value: no
    initial_value: "0"


# Common housekeeping components.
output:
  <<: !include common/outputs/status_led.yaml

light:
  <<: !include common/lights/status_led.yaml


binary_sensor:
  - !include common/binary_sensors/status.yaml

  # ============================================================================= #
  # Buttons along the left side of the unit (R1, R2, R3, R4).

  - platform: gpio
    id: key1
    pin:
      number: $button_1_gpio
      mode: INPUT_PULLUP
      inverted: True
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: retic_zone1

  - platform: gpio
    id: key2
    pin:
      number: $button_2_gpio
      mode: INPUT_PULLUP
      inverted: True
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: retic_zone2

  - platform: gpio
    id: key3
    pin:
      number: $button_3_gpio
      mode: INPUT_PULLUP
      inverted: True
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: retic_zone3

  - platform: gpio
    id: key4
    pin:
      number: $button_4_gpio
      mode: INPUT_PULLUP
      inverted: True
    filters:
      - delayed_on: 100ms
      - delayed_off: 100ms
    on_click:
      min_length: 50ms
      max_length: 350ms
      then:
        - switch.toggle: retic_zone4



switch:
  - !include common/switches/restart.yaml

  # ============================================================================= #
  # Virtual Zone Switches which toggle the relay, and store the current state.

  - platform: template
    name: Retic Zone1
    id: retic_zone1
    lambda: return id(relay1).state;
    optimistic: true
    turn_on_action:
      # Turn on if not disabled.
      if:
        condition:
          lambda: return id(retic_zone1_duration) > 0;
        then:
          - switch.turn_on: relay1
    turn_off_action:
      - switch.turn_off: relay1

  - platform: template
    name: Retic Zone2
    id: retic_zone2
    lambda: return id(relay2).state;
    optimistic: true
    turn_on_action:
      # Turn on if not disabled.
      if:
        condition:
          lambda: return id(retic_zone2_duration) > 0;
        then:
          - switch.turn_on: relay2
    turn_off_action:
      - switch.turn_off: relay2
      
  - platform: template
    name: Retic Zone3
    id: retic_zone3
    lambda: return id(relay3).state;
    optimistic: true
    turn_on_action:
      # Turn on if not disabled.
      if:
        condition:
          lambda: return id(retic_zone3_duration) > 0;
        then:
          - switch.turn_on: relay3
    turn_off_action:
      - switch.turn_off: relay3

  - platform: template
    name: Retic Zone4
    id: retic_zone4
    lambda: return id(relay4).state;
    optimistic: true
    turn_on_action:
      # Turn on if not disabled.
      if:
        condition:
          lambda: return id(retic_zone4_duration) > 0;
        then:
          - switch.turn_on: relay4
    turn_off_action:
      - switch.turn_off: relay4



  # ============================================================================= #
  # Relays which trigger solenoids
  
  - platform: gpio
    id: relay1
    pin: $relay_1_gpio
    on_turn_on:
      then:
        # Start the countdown timer.
        - globals.set:
            id: remaining_time1
            value: !lambda return id(retic_zone1_duration).state * 60;
        # Show the remaining time.
        - sensor.template.publish:
            id: retic_zone1_remaining
            state: !lambda return id(retic_zone1_duration).state;
        # Show the "Next Time" as "now".
        - text_sensor.template.publish:
            id: retic_zone1_next
            state: "now"
    on_turn_off:
      then:
        - sensor.template.publish:
            id: retic_zone1_remaining
            state: "0"
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: retic_zone1_next
            state: !lambda |-
              return update_next_runtime(id(retic_zone1_times).state);
              
  - platform: gpio
    id: relay2
    pin: $relay_2_gpio
    on_turn_on:
      then:
        # Start the countdown timer.
        - globals.set:
            id: remaining_time2
            value: !lambda return id(retic_zone2_duration).state * 60;
        # Show the remaining time.
        - sensor.template.publish:
            id: retic_zone2_remaining
            state: !lambda return id(retic_zone2_duration).state;
        # Show the "Next Time" as "now".
        - text_sensor.template.publish:
            id: retic_zone2_next
            state: "now"
    on_turn_off:
      then:
        - sensor.template.publish:
            id: retic_zone2_remaining
            state: "0"
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: retic_zone2_next
            state: !lambda |-
              return update_next_runtime(id(retic_zone2_times).state);
              

  - platform: gpio
    id: relay3
    pin: $relay_3_gpio
    on_turn_on:
      then:
        # Start the countdown timer.
        - globals.set:
            id: remaining_time3
            value: !lambda return id(retic_zone3_duration).state * 60;
        # Show the remaining time.
        - sensor.template.publish:
            id: retic_zone3_remaining
            state: !lambda return id(retic_zone3_duration).state;
        # Show the "Next Time" as "now".
        - text_sensor.template.publish:
            id: retic_zone3_next
            state: "now"
    on_turn_off:
      then:
        - sensor.template.publish:
            id: retic_zone3_remaining
            state: "0"
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: retic_zone3_next
            state: !lambda |-
              return update_next_runtime(id(retic_zone3_times).state);
              
  - platform: gpio
    id: relay4
    pin: $relay_4_gpio
    on_turn_on:
      then:
        # Start the countdown timer.
        - globals.set:
            id: remaining_time4
            value: !lambda return id(retic_zone4_duration).state * 60;
        # Show the remaining time.
        - sensor.template.publish:
            id: retic_zone4_remaining
            state: !lambda return id(retic_zone4_duration).state;
        # Show the "Next Time" as "now".
        - text_sensor.template.publish:
            id: retic_zone4_next
            state: "now"
    on_turn_off:
      then:
        - sensor.template.publish:
            id: retic_zone4_remaining
            state: "0"
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: retic_zone4_next
            state: !lambda |-
              return update_next_runtime(id(retic_zone4_times).state);


sensor:
  - !include common/sensors/uptime.yaml
  - !include common/sensors/wifi_signal.yaml

  # ============================================================================= #
  # Retrieve durations settings from the Home Assistant UI.
  
  - platform: homeassistant
    id: ui_zone1_duration
    entity_id: input_number.retic_zone1_duration
    on_value:
      then:
      - sensor.template.publish:
          id: retic_zone1_duration
          state: !lambda return id(ui_zone1_duration).state;

  - platform: homeassistant
    id: ui_zone2_duration
    entity_id: input_number.retic_zone2_duration
    on_value:
      then:
      - sensor.template.publish:
          id: retic_zone2_duration
          state: !lambda return id(ui_zone2_duration).state;
          
  - platform: homeassistant
    id: ui_zone3_duration
    entity_id: input_number.retic_zone3_duration
    on_value:
      then:
      - sensor.template.publish:
          id: retic_zone3_duration
          state: !lambda return id(ui_zone3_duration).state;

  - platform: homeassistant
    id: ui_zone4_duration
    entity_id: input_number.retic_zone4_duration
    on_value:
      then:
      - sensor.template.publish:
          id: retic_zone4_duration
          state: !lambda return id(ui_zone4_duration).state;
          
          
  # ============================================================================= #
  # Store durations.
  - platform: template
    name: Retic Zone1 Duration
    id: retic_zone1_duration
  - platform: template
    name: Retic Zone2 Duration
    id: retic_zone2_duration
  - platform: template
    name: Retic Zone3 Duration
    id: retic_zone3_duration
  - platform: template
    name: Retic Zone4 Duration
    id: retic_zone4_duration


  # ============================================================================= #
  # Countdown sensors.
  - platform: template
    name: Retic Zone1 Remaining
    id: retic_zone1_remaining
    lambda: "return 0;"
    accuracy_decimals: 0
    unit_of_measurement: minutes
    icon: mdi:timer
    on_value:
      then:
        - if:
            condition:
              lambda: return id(remaining_time1) == 0;
            then:
              - switch.turn_off: relay1

  - platform: template
    name: Retic Zone2 Remaining
    id: retic_zone2_remaining
    lambda: "return 0;"
    accuracy_decimals: 0
    unit_of_measurement: minutes
    icon: mdi:timer
    on_value:
      then:
        - if:
            condition:
              lambda: return id(remaining_time2) == 0;
            then:
              - switch.turn_off: relay2

  - platform: template
    name: Retic Zone3 Remaining
    id: retic_zone3_remaining
    lambda: "return 0;"
    accuracy_decimals: 0
    unit_of_measurement: minutes
    icon: mdi:timer
    on_value:
      then:
        - if:
            condition:
              lambda: return id(remaining_time3) == 0;
            then:
              - switch.turn_off: relay3

  - platform: template
    name: Retic Zone4 Remaining
    id: retic_zone4_remaining
    lambda: "return 0;"
    accuracy_decimals: 0
    unit_of_measurement: minutes
    icon: mdi:timer
    on_value:
      then:
        - if:
            condition:
              lambda: return id(remaining_time4) == 0;
            then:
              - switch.turn_off: relay4


text_sensor:
  # ============================================================================= #
  # Retrieve list of times from the Home Assistant UI.
  - platform: homeassistant
    id: ui_zone1_times
    entity_id: input_text.retic_zone1_times
    on_value:
      then:
        #- delay: 10sec
        - text_sensor.template.publish:
            id: retic_zone1_times
            state: !lambda return id(ui_zone1_times).state;

  - platform: homeassistant
    id: ui_zone2_times
    entity_id: input_text.retic_zone2_times
    on_value:
      then:
        #- delay: 10sec
        - text_sensor.template.publish:
            id: retic_zone2_times
            state: !lambda return id(ui_zone2_times).state;
            
  - platform: homeassistant
    id: ui_zone3_times
    entity_id: input_text.retic_zone3_times
    on_value:
      then:
        #- delay: 10sec
        - text_sensor.template.publish:
            id: retic_zone3_times
            state: !lambda return id(ui_zone3_times).state;

  - platform: homeassistant
    id: ui_zone4_times
    entity_id: input_text.retic_zone4_times
    on_value:
      then:
        #- delay: 10sec
        - text_sensor.template.publish:
            id: retic_zone4_times
            state: !lambda return id(ui_zone4_times).state;


  # ============================================================================= #
  # Store time lists.
  - platform: template
    name: Retic Zone1 Times
    id: retic_zone1_times
    on_value:
      then:
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: retic_zone1_next
            state: !lambda |-
              return update_next_runtime(id(retic_zone1_times).state);
              
  - platform: template
    name: Retic Zone2 Times
    id: retic_zone2_times
    on_value:
      then:
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: retic_zone2_next
            state: !lambda |-
              return update_next_runtime(id(retic_zone2_times).state);

  - platform: template
    name: Retic Zone3 Times
    id: retic_zone3_times
    on_value:
      then:
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: retic_zone3_next
            state: !lambda |-
              return update_next_runtime(id(retic_zone3_times).state);
              
  - platform: template
    name: Retic Zone4 Times
    id: retic_zone4_times
    on_value:
      then:
        # Update the next scheduled run time.
        - text_sensor.template.publish:
            id: retic_zone4_next
            state: !lambda |-
              return update_next_runtime(id(retic_zone4_times).state);
              
              
  # ============================================================================= #
  # Set the next scheduled time.
  - platform: template
    name: Retic Zone1 Next
    id: retic_zone1_next
  - platform: template
    name: Retic Zone2 Next
    id: retic_zone2_next
  - platform: template
    name: Retic Zone3 Next
    id: retic_zone3_next
  - platform: template
    name: Retic Zone4 Next
    id: retic_zone4_next
    
    
# Update the countdown timers every 5 seconds.
interval:
  - interval: 5s
    then:
      - lambda: |-
          if (id(remaining_time1) > 0) {
            // Store the previous time.
            id(remaining_time1_previous) = id(remaining_time1);
            // When the relay is on.
            if (id(relay1).state) {
              // Decrement the timer.
              id(remaining_time1) -= 5;
              // Turn off the relay when the time reaches zero... or the remaining time fails a sanity check!
              //if (id(remaining_time1) <= 0 || id(retic_zone1_remaining).state > id(retic_zone1_duration).state){
              if (id(remaining_time1) <= 0) {
                id(relay1).turn_off();
                id(remaining_time1) = 0;
              }
            }
            // Update the remaining time display.
            if (id(remaining_time1_previous) != id(remaining_time1)) {
              id(retic_zone1_remaining).publish_state( (id(remaining_time1)/60) + 1 );
            }
          }
 
          if (id(remaining_time2) > 0) {
            // Store the previous time.
            id(remaining_time2_previous) = id(remaining_time2);
            // When the relay is on.
            if (id(relay2).state) {
              // Decrement the timer.
              id(remaining_time2) -= 5;
              // Turn off the relay when the time reaches zero... or the remaining time fails a sanity check!
              //if (id(remaining_time2) <= 0 || id(retic_zone2_remaining).state > id(retic_zone2_duration).state){
              if (id(remaining_time2) <= 0) {
                id(relay2).turn_off();
                id(remaining_time2) = 0;
              }
            }
            // Update the remaining time display.
            if (id(remaining_time2_previous) != id(remaining_time2)) {
              id(retic_zone2_remaining).publish_state( (id(remaining_time2)/60) + 1 );
            }
          }
          
          if (id(remaining_time3) > 0) {
            // Store the previous time.
            id(remaining_time3_previous) = id(remaining_time3);
            // When the relay is on.
            if (id(relay3).state) {
              // Decrement the timer.
              id(remaining_time3) -= 5;
              // Turn off the relay when the time reaches zero... or the remaining time fails a sanity check!
              //if (id(remaining_time3) <= 0 || id(retic_zone3_remaining).state > id(retic_zone3_duration).state){
              if (id(remaining_time3) <= 0) {
                id(relay3).turn_off();
                id(remaining_time3) = 0;
              }
            }
            // Update the remaining time display.
            if (id(remaining_time3_previous) != id(remaining_time3)) {
              id(retic_zone3_remaining).publish_state( (id(remaining_time3)/60) + 1 );
            }
          }

          if (id(remaining_time4) > 0) {
            // Store the previous time.
            id(remaining_time4_previous) = id(remaining_time4);
            // When the relay is on.
            if (id(relay4).state) {
              // Decrement the timer.
              id(remaining_time4) -= 5;
              // Turn off the relay when the time reaches zero... or the remaining time fails a sanity check!
              //if (id(remaining_time4) <= 0 || id(retic_zone4_remaining).state > id(retic_zone4_duration).state){
              if (id(remaining_time4) <= 0) {
                id(relay4).turn_off();
                id(remaining_time4) = 0;
              }
            }
            // Update the remaining time display.
            if (id(remaining_time4_previous) != id(remaining_time4)) {
              id(retic_zone4_remaining).publish_state( (id(remaining_time4)/60) + 1 );
            }
          }
          
          
          
# Time based automations.
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: |-
              if (scheduled_runtime(id(retic_zone1_next).state.c_str())) {
                id(retic_zone1).turn_on();
              }

              if (scheduled_runtime(id(retic_zone2_next).state.c_str())) {
                id(retic_zone2).turn_on();
              }
              
              if (scheduled_runtime(id(retic_zone3_next).state.c_str())) {
                id(retic_zone3).turn_on();
              }

              if (scheduled_runtime(id(retic_zone4_next).state.c_str())) {
                id(retic_zone4).turn_on();
              }

