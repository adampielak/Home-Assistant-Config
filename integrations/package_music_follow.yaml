---

input_boolean:
  follow_music:
    name: Follow Music
    initial: off

input_select:
  music_controller:
    name: Music Controller
    options:
      - office_sonos
      - living_room_sonos
      - master_bedroom_sonos

######################################################################################
# Scripts

script:

  sonos_group_from_motion:
    alias: "Sonos Group Motion"
    sequence:
      - condition: template
        value_template: >
          {% if target_player is not none and target_player != false and target_player != '' %}
            true
          {% else %}
            false
          {% endif %}
    
      # The target player must not be playing anything
      - condition: template
        value_template: >
          {% if states(target_player) != 'playing' %}
            true
          {% else %}
            false
          {% endif %}

      # First set the target player to the same volume as the controller
      - service: media_player.volume_set
        data_template:
          entity_id: >
            {% if target_player is not none %}
              {{ target_player }}
            {% endif %}
          volume_level: >
            {% for state in states.media_player if state.entity_id == 'media_player.' + states('input_select.music_controller') %}
              {{state.attributes.volume_level }}
            {% endfor %}

      #Now join the player into the group
      - service: sonos.join
        data_template:
          master: media_player.{{ states('input_select.music_controller') }}
          entity_id: >
            {% if target_player is not none %}
              {{ target_player }}
            {% endif %}


  sonos_ungroup_from_motion:
    alias: "Sonos Ungroup Motion"
    sequence:
      - condition: template
        value_template: >
          {% if target_player is not none and target_player != false and target_player != '' %}
            true
          {% else %}
            false
          {% endif %}
    
      # The target player must be playing
      - condition: template
        value_template: >
          {% if states(target_player) == 'playing' %}
            true
          {% else %}
            false
          {% endif %}
    
      # The target must not be the co-ordinator
      - condition: template
        value_template: >
          {% if target_player != 'media_player.' + states('input_select.music_controller') %}
            true
          {% else %}
            false
          {% endif %}
      
      - service: sonos.unjoin
        data_template:
          entity_id: >
            {% if target_player is not none %}
              {{ target_player }}
            {% endif %}

###################################################################################################
# Automations

automation:

  - id: group_player_when_motion_detected
    alias: Group Player when motion detected
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: sensor.master_bathroom_motion_sensor
        to: 'on'
      - platform: state
        entity_id: sensor.office_motion_sensor
        to: 'on'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.follow_music
          state: 'on'
        # The controller player must be playing music (not paused)  
        - condition: template
          value_template: >
            {% if states('media_player.' + states('input_select.music_controller')) == 'playing' %}
              true
            {% else %}
              false
            {% endif %}
    action:
      - service: script.sonos_group_from_motion
        data_template:
          target_player: >
            {% if trigger.entity_id == 'sensor.master_mathroom_motion_sensor' %}
              {% set player = 'media_player.master_bathroom_sonos' %}
            {% elif trigger.entity_id == 'sensor.office_motion_sensor' %}
              {% set player = 'media_player.office_sonos' %}
            {% endif %}
            {% if player is not none %}
              {{ player }}
            {% else %}
              false
            {% endif %}


  - id: ungroup_player_when_motion_not_detected
    alias: Ungroup Player when motion not detected
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: sensor.master_bathroom_motion_sensor
        to: 'off'
      - platform: state
        entity_id: sensor.office_motion_sensor
        to: 'off'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.follow_music
          state: 'on'
    action:
      - service: script.sonos_ungroup_from_motion
        data_template:
          target_player: >
            {% if trigger.entity_id == 'sensor.master_mathroom_motion_sensor' %}
              {% set player = 'media_player.master_bathroom_sonos' %}
            {% elif trigger.entity_id == 'sensor.office_motion_sensor' %}
              {% set player = 'media_player.office_sonos' %}
            {% endif %}
            {% if player is not none %}
              {{ player }}
            {% else %}
              false
            {% endif %}


  - id: disable_follow_music_if_controller_has_been_paused
    alias: Disable follow music if controller has been paused
    initial_state: 'on'
    trigger:
      # Check every 5 minutes
      - platform: time_pattern
        minutes: '/5'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: input_boolean.follow_music
          state: 'on'
        # The controller player must NOT be playing
        - condition: template
          value_template: >
            {% if states('media_player.' + states('input_select.music_controller')) != 'playing' %}
              true
            {% else %}
              false
            {% endif %}
        # The controller player must be paused for at least 15 minutes (900 seconds)
        - condition: template
          value_template: >
            {% for state in states.media_player if state.entity_id == 'media_player.' + states('input_select.music_controller') %}
              {% if as_timestamp(now()) | int - as_timestamp(state.last_changed) > 900 %}
                true
              {% else %}
                false
              {% endif %}
            {% else %}
              false
            {% endfor %}
    action:
      - service: homeassistant.turn_off
        entity_id: input_boolean.follow_music